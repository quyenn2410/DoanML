# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jaccLz5zVZ54xBwr5LLeiYD92ESWymkN
"""

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd
import nltk
import re
nltk.download("stopwords")
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score
from sklearn.feature_extraction.text import TfidfVectorizer

datatrain = pd.read_excel('/content/gdrive/MyDrive/ML/NLP 01/Constraint_English_Train.xlsx')
datatest = pd.read_excel('/content/gdrive/MyDrive/ML/NLP 01/Constraint_English_Val.xlsx')

#split dataset to input X and outcome Y
#datatrain
X_train = datatrain['tweet']
y_train = datatrain['label']
y_train = [1 if x == 'real' else 0 for x in y_train]
#datatest
X_test = datatest['tweet']
y_test = datatest["label"]
y_test = [1 if x == 'real' else 0 for x in y_test]

datatrain.isna().sum()
#Kiểm tra rỗng trên tập train

datatest.isna().sum()
#Kiểm tra rỗng trên tập test

datatrain.label.value_counts()
#đếm số câu trên mỗi nhãn trên tập train

datatest.label.value_counts()
#đếm số câu trên mỗi nhãn trên tập test

import wordcloud
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
get_ipython().run_line_magic('matplotlib', 'inline')
cloud = np.array(datatrain["tweet"]).flatten()
plt.figure(figsize=(20,10))
word_cloud = wordcloud.WordCloud(max_words=100,background_color ="black",
                               width=2000,height=1000,mode="RGB").generate(str(cloud))
plt.axis("off")
plt.imshow(word_cloud)
# Kiểm tra tấn suất xuất hiện của 1 từ, từ đó xuất hiện càng nhiều thì kích cỡ chữ càng lớn

#tiền xử lý
X_train = []
for tweet in datatrain.values[:, 1]:
    tweet = re.sub("[^a-zA-Z]", " ", tweet)
    tweet = tweet.split()
    ps = PorterStemmer()
    tweet = [ps.stem(word) for word in tweet if word not in stopwords.words("english")]
    tweet = " ".join(tweet)
    X_train.append(tweet)

X_test = []
for tweet in datatest.values[:, 1]:
    tweet = re.sub("[^a-zA-Z]", " ", tweet)
    tweet = tweet.split()
    ps = PorterStemmer()
    tweet = [ps.stem(word) for word in tweet if word not in stopwords.words("english")]
    tweet = " ".join(tweet)
    X_test.append(tweet)

token_count= sum(len(sen) for sen in X_train)
print("Có {0:,} từ".format(token_count))

token_count= sum(len(sen) for sen in X_test)
print("Có {0:,} từ".format(token_count))

#vector hóa
vectorizer = CountVectorizer()
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

#Số từ trong từ điển hiện tại
print(X_train.shape[1])

#Logistic Regression
logreg = LogisticRegression()
logreg.fit(X_train, y_train)
lr_prediction = logreg.predict(X_test)
logreg.score(X_test, y_test)

#Decision Tree classifier
dtc = DecisionTreeClassifier()
dtc.fit(X_train, y_train)
dtc_predict = dtc.predict(X_test)
dtc.score(X_test, y_test)

#Random forest classifier
rfc = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
rfc.fit(X_train, y_train)
rfc_predict = rfc.predict(X_test)
rfc.score(X_test, y_test)

#Kernel SVM
kn = SVC(kernel = "rbf")
kn.fit(X_train, y_train)
kn_predict = kn.predict(X_test)
kn.score(X_test, y_test)

#Naive Bayes
nb = GaussianNB()
nb.fit(X_train.toarray(), y_train)
nb_predict = nb.predict(X_test.toarray())
nb.score(X_test.toarray(), y_test)

#recall của Logistic Regression
recall_score(y_test, logreg.predict(X_test))

#recall của Decision Tree classifier
recall_score(y_test, dtc.predict(X_test))

#recall của Random forest classifier
recall_score(y_test, rfc.predict(X_test))

#recall của Kernel SVM
recall_score(y_test, kn.predict(X_test))

#recall của Naive Bayes
recall_score(y_test, nb.predict(X_test.toarray()))

#precision của Logistic Regression
precision_score(y_test, logreg.predict(X_test))

#precision của Decision Tree classifier
precision_score(y_test, dtc.predict(X_test))

#precision của Random forest classifier
precision_score(y_test, rfc.predict(X_test))

#precision của Kernel SVM
precision_score(y_test, kn.predict(X_test))

#precision của Naive Bayes
precision_score(y_test, nb.predict(X_test.toarray()))

#F1 của Logistic Regression
f1_score(y_test, logreg.predict(X_test))

#F1 của Decision Tree classifier
f1_score(y_test, dtc.predict(X_test))

#F1 của Random forest classifier
f1_score(y_test, rfc.predict(X_test))

#F1 của Kernel SVM
f1_score(y_test, kn.predict(X_test))

#F1 của Naive Bayes
f1_score(y_test, nb.predict(X_test.toarray()))

#accuracy của Logistic Regression
accuracy_score(y_test, logreg.predict(X_test))

#accuracy của Decision Tree classifier
accuracy_score(y_test, dtc.predict(X_test))

#accuracy của Random forest classifier
accuracy_score(y_test, rfc.predict(X_test))

#accuracy của Kernel SVM
accuracy_score(y_test, kn.predict(X_test))

#accuracy của Naive Bayes
accuracy_score(y_test, nb.predict(X_test.toarray()))